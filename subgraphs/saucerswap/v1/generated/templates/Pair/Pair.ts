// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0In(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1In(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount0Out(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get reserve0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reserve1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Pair__getReservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Pair__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pair extends ethereum.SmartContract {
  static bind(address: Address): Pair {
    return new Pair("Pair", address);
  }

  MINIMUM_LIQUIDITY(): BigInt {
    let result = super.call(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_LIQUIDITY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  kLast(): BigInt {
    let result = super.call("kLast", "kLast():(uint256)", []);

    return result[0].toBigInt();
  }

  try_kLast(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("kLast", "kLast():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpToken(): Address {
    let result = super.call("lpToken", "lpToken():(address)", []);

    return result[0].toAddress();
  }

  try_lpToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lpToken", "lpToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price0CumulativeLast(): BigInt {
    let result = super.call(
      "price0CumulativeLast",
      "price0CumulativeLast():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_price0CumulativeLast(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "price0CumulativeLast",
      "price0CumulativeLast():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  price1CumulativeLast(): BigInt {
    let result = super.call(
      "price1CumulativeLast",
      "price1CumulativeLast():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_price1CumulativeLast(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "price1CumulativeLast",
      "price1CumulativeLast():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tinycentsToTinybars(tinycents: BigInt): BigInt {
    let result = super.call(
      "tinycentsToTinybars",
      "tinycentsToTinybars(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tinycents)]
    );

    return result[0].toBigInt();
  }

  try_tinycentsToTinybars(tinycents: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tinycentsToTinybars",
      "tinycentsToTinybars(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tinycents)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserves(): Pair__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves():(uint112,uint112,uint32)",
      []
    );

    return new Pair__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getReserves(): ethereum.CallResult<Pair__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves():(uint112,uint112,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  mint(to: Address): BigInt {
    let result = super.call("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBigInt();
  }

  try_mint(to: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(to: Address): Pair__burnResult {
    let result = super.call("burn", "burn(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(to)
    ]);

    return new Pair__burnResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_burn(to: Address): ethereum.CallResult<Pair__burnResult> {
    let result = super.tryCall("burn", "burn(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pair__burnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class TinycentsToTinybarsCall extends ethereum.Call {
  get inputs(): TinycentsToTinybarsCall__Inputs {
    return new TinycentsToTinybarsCall__Inputs(this);
  }

  get outputs(): TinycentsToTinybarsCall__Outputs {
    return new TinycentsToTinybarsCall__Outputs(this);
  }
}

export class TinycentsToTinybarsCall__Inputs {
  _call: TinycentsToTinybarsCall;

  constructor(call: TinycentsToTinybarsCall) {
    this._call = call;
  }

  get tinycents(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TinycentsToTinybarsCall__Outputs {
  _call: TinycentsToTinybarsCall;

  constructor(call: TinycentsToTinybarsCall) {
    this._call = call;
  }

  get tinybars(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amount0Out(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SkimCall extends ethereum.Call {
  get inputs(): SkimCall__Inputs {
    return new SkimCall__Inputs(this);
  }

  get outputs(): SkimCall__Outputs {
    return new SkimCall__Outputs(this);
  }
}

export class SkimCall__Inputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SkimCall__Outputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class CreateFungibleCall extends ethereum.Call {
  get inputs(): CreateFungibleCall__Inputs {
    return new CreateFungibleCall__Inputs(this);
  }

  get outputs(): CreateFungibleCall__Outputs {
    return new CreateFungibleCall__Outputs(this);
  }
}

export class CreateFungibleCall__Inputs {
  _call: CreateFungibleCall;

  constructor(call: CreateFungibleCall) {
    this._call = call;
  }
}

export class CreateFungibleCall__Outputs {
  _call: CreateFungibleCall;

  constructor(call: CreateFungibleCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
